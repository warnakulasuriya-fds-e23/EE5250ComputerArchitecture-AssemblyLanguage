sub al, '0'	;al=al-'0' where '0' is the ASCII value of the character '0', after this is done al will be converted into purely number and it will 
;no loger contain a character value. And with this number we can do instructions like mul and div
mul al		;al=al*al this is the multiplication of the register value by itself

mul 10	;al=al*10
mul cl;al=al*cl

mov bl,10	;sets bl=10
div bl		;although its not obvious this instruction is defined such that executing it will do ah:al=al/bl where ah will recive the value of the
;quotient and al will recieve the value of the reminder

basically the div bl causes the al to be divided by the bl value and then quotient will be sent to ah and the remainder will be sent to al,its just
the way that the div instruction has been programmed


mul instruction
-----------------

mul <8bit register or immediate number>; al=al*<8bit register or immediate number>
mul <16bit register or immediate number>; dx:ax=ax*<16bit  register or immediate number>
mul <32bit  register or immediate number>;edx:eax=eax*<32bit  register or immediate number>

in reference documennts <8bit  register or immediate number> is written as r/m8 where r implies register and m implies immediate value 8 say 8 bit 
MUL r/m8	;Unsigned multiply (AX = AL * r/m8).
MUL r/m16	;Unsigned multiply (DX:AX = AX * r/m16).
MUL r/m32	;Unsigned multiply (EDX:EAX = EAX * r/m32).


jmp instrunction (jump instruction)
-----------------------------------

jmp label	;make CPU execute the instruction at "label" address as the next instruction

note that the eip register will store the adress of the next instruction to be executed
ip= instruction pointer
its very important for the CPU to internally update the ip vlaue so that program can keep on executing. As each instruction is seperate from the
other, without ip there is no defined way to execute the next instruction

conditional instruction
------------------------

cmp al,3	; al-3 will be evaluated, value will NOT be stored in al, value could be either +, 0 or -. Evaluated value will be stored in ZF flag
